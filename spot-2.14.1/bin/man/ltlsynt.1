.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.4.
.\" -*- coding: utf-8 -*-
.TH LTLSYNT "1" "July 2025" "ltlsynt (spot) 2.14.1" "User Commands"
.SH NAME
ltlsynt \- reactive synthesis from LTL specifications
.SH SYNOPSIS
.B ltlsynt
[\fI\,OPTION\/\fR...]
.SH DESCRIPTION
Synthesize a controller from its LTL specification.
.SS "Input options:"
.TP
\fB\-\-from\-pgame\fR=\fI\,FILENAME\/\fR
Read a parity game in Extended HOA format instead
of building it.
.TP
\fB\-f\fR, \fB\-\-formula\fR=\fI\,STRING\/\fR
process the formula STRING
.TP
\fB\-F\fR, \fB\-\-file\fR=\fI\,FILENAME\/\fR[\fI\,/COL\/\fR]\fI\,\/\fR
process each line of FILENAME as a formula; if COL
is a positive integer, assume a CSV file and read
column COL; use a negative COL to drop the first
line of the CSV file
.TP
\fB\-\-ins\fR=\fI\,PROPS\/\fR
comma\-separated list of uncontrollable (a.k.a.
input) atomic propositions, interpreted as a regex
if enclosed in slashes
.TP
\fB\-\-lbt\-input\fR
read all formulas using LBT's prefix syntax
.TP
\fB\-\-lenient\fR
parenthesized blocks that cannot be parsed as
subformulas are considered as atomic properties
.TP
\fB\-\-outs\fR=\fI\,PROPS\/\fR
comma\-separated list of controllable (a.k.a.
output) atomic propositions, , interpreted as a
regex if enclosed in slashes
.TP
\fB\-\-part\-file\fR=\fI\,FILENAME\/\fR
read the I/O partition of atomic propositions from
FILENAME
.TP
\fB\-\-tlsf\fR=\fI\,FILENAME\/\fR[\fI\,/VAR=VAL\/\fR[\fI\,\/\fR,VAR=VAL...]]
Read a TLSF specification from FILENAME, and call
syfco to convert it into LTL.  Any parameter
assignment specified after a slash is passed as
\&'\-op VAR=VAL' to syfco.
.SS "Fine tuning:"
.TP
\fB\-\-algo\fR=\fI\,sd\/\fR|\fI\,ds\/\fR|\fI\,ps\/\fR|\fI\,lar\/\fR|\fI\,lar.old\/\fR|\fI\,acd\/\fR
choose the algorithm for synthesis:
.TP
sd: translate to TGBA, split, determinize
ds: translate to TGBA, determinize, split
ps: translate to DPA, split
lar: translate to a deterministic TELA, convert
.TP
to DPA with LAR, split (default)
lar.old: old version of LAR, for benchmarking;
acd: translate to a deterministic TELA, convert
.IP
to DPA with ACD, split
.TP
\fB\-\-bypass\fR=\fI\,yes\/\fR|\fI\,no\/\fR
whether to try to avoid to construct a parity game
(enabled by default)
.TP
\fB\-\-decompose\fR=\fI\,yes\/\fR|\fI\,no\/\fR
whether to decompose the specification as multiple
output\-disjoint problems to solve independently
(enabled by default)
.TP
\fB\-\-global\-equivalence\fR=\fI\,yes\/\fR|\fI\,no\/\fR|\fI\,before\-decompose\/\fR
whether to remove atomic propositions that are
always equivalent to another one (enabled by
default, both before and after decomposition)
.TP
\fB\-\-polarity\fR=\fI\,yes\/\fR|\fI\,no\/\fR|\fI\,before\-decompose\/\fR
whether to remove atomic propositions that always
have the same polarity in the formula to speed
things up (enabled by default, both before and
after decomposition)
.TP
\fB\-\-simplify\fR=\fI\,no\/\fR|\fI\,bisim\/\fR|\fI\,bwoa\/\fR|\fI\,sat\/\fR|\fI\,bisim\-sat\/\fR|\fI\,bwoa\-sat\/\fR
simplification to apply to the controller (no)
nothing, (bisim) bisimulation\-based reduction,
(bwoa) bisimulation\-based reduction with output
assignment, (sat) SAT\-based minimization,
(bisim\-sat) SAT after bisim, (bwoa\-sat) SAT after
bwoa.  Defaults to 'bwoa'.
.TP
\fB\-\-splittype\fR=\fI\,expl\/\fR|\fI\,semisym\/\fR|\fI\,fullysym\/\fR|\fI\,auto\/\fR
Selects the algorithm to use to transform the
automaton into a game graph. Defaults to 'auto'.
.SS "Output options:"
.TP
\fB\-\-aiger\fR[=\fI\,ite\/\fR|\:\fI\,isop\/\fR|\:\fI\,both[+ud][+dc][+sub0\/\fR|\:\fI\,sub1\/\fR|\:\fI\,sub2]\/\fR]
encode the winning strategy as an AIG circuit and
print it in AIGER format. The first word indicates
the encoding to used: "ite" for If\-Then\-Else
normal form; "isop" for irreducible sum of
products; "both" tries both and keeps the smaller
one. Other options further refine the encoding,
see aiger::encode_bdd. Defaults to "ite".
.TP
\fB\-\-csv\fR[\fI\,\/\fR=\fI\,\/\fR[\fI\,\/\fR>>]FILENAME], \fB\-\-csv\-without\-formula\fR[\fI\,\/\fR=\fI\,\/\fR[\fI\,\/\fR>>]FILENAME]
output statistics as CSV in FILENAME or on
standard output (if '>>' is used to request append
mode, the header line is not output)
.TP
\fB\-\-csv\-with\-formula\fR[\fI\,\/\fR=\fI\,\/\fR[\fI\,\/\fR>>]FILENAME]
like \fB\-\-csv\fR, but with an additional 'fomula'
column
.TP
\fB\-d\fR, \fB\-\-dot\fR[=\fI\,options\/\fR]
Use dot format when printing the result (game,
strategy, or AIG circuit, depending on other
options).  The options that may be passed to \fB\-\-dot\fR
depend on the nature of what is printed. For games
and strategies, standard automata rendering
options are supported (e.g., see ltl2tgba \fB\-\-dot\fR).
For AIG circuit, use (h) for horizontal and (v)
for vertical layouts.
.TP
\fB\-\-hide\-status\fR
hide the REALIZABLE or UNREALIZABLE line (The exit
status is enough of an indication.)
.TP
\fB\-H\fR, \fB\-\-hoaf\fR[=\fI\,1.1\/\fR|\:\fI\,b\/\fR|\:\fI\,i\/\fR|\:\fI\,k\/\fR|\:\fI\,l\/\fR|\:\fI\,m\/\fR|\:\fI\,s\/\fR|\:\fI\,t\/\fR|\:\fI\,v\/\fR]
Output the automaton in HOA format (default).  Add
letters to select (1.1) version 1.1 of the format,
(b) create an alias basis if >=2 AP are used, (i)
use implicit labels for complete deterministic
automata, (s) prefer state\-based acceptance when
possible [default], (t) force transition\-based
acceptance, (m) mix state and transition\-based
acceptance, (k) use state labels when possible,
(l) single\-line output, (v) verbose properties
.TP
\fB\-\-print\-game\-hoa\fR[=\fI\,options\/\fR]
print the parity game in the HOA format, do
not solve it
.TP
\fB\-\-print\-pg\fR
print the parity game in the pgsolver format, do
not solve it
.TP
\fB\-q\fR, \fB\-\-quiet\fR
suppress all normal output
.TP
\fB\-\-realizability\fR
realizability only, do not compute a winning
strategy
.SS "Miscellaneous options:"
.TP
\fB\-\-help\fR
print this help
.TP
\fB\-\-verbose\fR
verbose mode
.TP
\fB\-\-verify\fR
verify the strategy or (if demanded) AIG against
the formula
.TP
\fB\-\-version\fR
print program version
.TP
\fB\-x\fR, \fB\-\-extra\-options\fR=\fI\,OPTS\/\fR
fine\-tuning options (see spot\-x (7))
.PP
Mandatory or optional arguments to long options are also mandatory or optional
for any corresponding short options.
.SS "Exit status:"
.TP
0
if all input problems were realizable
.TP
1
if at least one input problem was not realizable
.TP
2
if any error has been reported
.SH BIBLIOGRAPHY
If you would like to give a reference to this tool in an article,
we suggest you cite the following papers:
.TP
\(bu
Florian Renkin, Philipp Schlehuber-Caissier, Alexandre Duret-Lutz,
and Adrien Pommellet.
Dissecting ltlsynt.  In Formal Methods in System Design, 2023.

.TP
\(bu
Thibaud Michaud and Maximilien Colange.
Reactive Synthesis from LTL Specification with Spot.
In proceedings of SYNT@CAV'18.
.SH "REPORTING BUGS"
Report bugs to <spot@lrde.epita.fr>.
.SH COPYRIGHT
Copyright \(co 2025 by the Spot authors, see the AUTHORS File for details.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
.BR ltlfsynt (1)
